" BASIC_SETTINGS ---------- {{{
let maplocalleader="\\"
let pi = 3.14159265359
let e  = 2.71828182846
set nocompatible
set noswapfile
set nobackup
set undodir=~/.vim/undodir
set undofile
" Kill the audio bell
set visualbell
" Find files without using a plugin
" Search down into subfolders
set path+=**
set more
" Display options
set showmode
set showcmd
" Show relative line numbers
set number
set relativenumber
" Turn on syntax highlighting.
syntax on
" Helps force plug-ins to load correctly when it is turned back on below
filetype off
" For plug-ins to load correctly
filetype plugin indent on
set encoding=utf-8
set modelines=2
" fix background problems in tmux run on terminal
set t_ut=""
set background=dark
set termguicolors
" Bring the colors back after termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
" to get italics to work in the terminal
set t_ZH=[3m
set t_ZR=[23m
" }}}
" MAPPINGS ---------- {{{
" This unsets the last search pattern register by hitting return
nnoremap <silent> <CR> :nohlsearch<CR><CR>
" Map the <Space> key to toggle a selected fold opened/closed.
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
" To easily pull up buffer list and type the one I want
nnoremap <leader>b :buffers<CR>:buffer<Space>
vnoremap <Space> zf
" INSERT_MODE_DOUBLE_CAPS ---------- {{{
inoremap UU <C-O>u
inoremap AA <Esc>A
inoremap OO <Esc>O
inoremap WW <Esc>:w<CR>
inoremap HH <C-O>^
" }}}
" ESCAPE_EASILY ----------{{{
inoremap jk <Esc>
vnoremap jk <Esc>
cnoremap jk <Esc>
" }}}
" FUNCTION_KEYS ---------- {{{
" Vim's auto indentation feature does not work from an outside clipboard.
" Press <F2> key to toggle.
nnoremap <F2> :set invpaste paste?<CR> imap <F2> <C-O>:set invpaste paste?<CR>
nnoremap <F3> GoDate: <Esc>:read !date<CR>kJ
inoremap <F3> <C-O>oDate: <Esc>:read !date<CR>kJo
nnoremap <F4> :write<CR>
inoremap <F4> <Esc>:write<CR>
nnoremap <F5> :write<CR>:source %<CR>
inoremap <F5> <Esc>:write<CR>:source %<CR>
nnoremap <F12> :write<CR>:mksession! $HOME/.vim/sessions/mine.vim<CR>:qall<CR>
" }}}
" Move current line up
noremap - dd2kp
" Move current line down
noremap _ ddp
noremap H ^
noremap L $
" Uppercase a word
inoremap <leader><C-U> <Esc>viwUea
nnoremap <leader><C-U> viwU
" Open .vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
" Source .vimrc
nnoremap <leader>sv :source $MYVIMRC<CR>
" Open the abbreviations plugin
nnoremap <leader>et :vsplit
            \ $HOME/.vim/pack/my-plugins/start/mytypos/plugin/mytypos.vim<CR>
" Find trailing white space
nnoremap <Leader>w :match Error /\v\s+$/<CR>
nnoremap <Leader>W :match none<CR>
nnoremap / /\v
" OPERATE_AROUND_BRACKETS ---------- {{{
onoremap p i(
onoremap in( :<C-U>normal! f(vi(<CR>
onoremap il( :<C-U>normal! F)vi(<CR>
onoremap in[ :<C-U>normal! f[vi[<CR>
onoremap il[ :<C-U>normal! F]vi[<CR>
onoremap in{ :<C-U>normal! f{vi{<CR>
onoremap il{ :<C-U>normal! F}vi{<CR>
onoremap <silent> F :<C-U>normal! 0f(hviw<CR>
" }}}
" OPEN_PREVIOUS_BUFFER_IN_WINDOW_RIGHT_OR_BELOW ---------- {{{
nnoremap <Leader>r :execute "rightbelow vsplit " . bufname("#")<CR>
nnoremap <Leader>v :execute "rightbelow split " . bufname("#")<CR>
" }}}
" nnoremap <Leader>g :silent execute "grep! -R " . shellescape(expand("<cWORD>"))
            " \ . " ."<CR>:copen<CR>:redraw!<CR>
nnoremap <Leader>cn :cnext<CR>
nnoremap <Leader>cp :cprevious<CR>
" }}}
" AUTOCOMMANDS ---------- {{{
" SAVE_AND_LOAD_FOLDS ---------- {{{
" augroup folds
    " autocmd!
    " autocmd BufWinLeave *.* mkview
    " autocmd BufWinEnter *.* silent loadview"
" augroup END
" }}}
" TEMPLATES ---------- {{{
augroup templates
    " clear previous autocommands
    autocmd!
    " read in template files
    autocmd BufNewFile *.* silent! execute "0r $HOME/.vim/templates/skeleton."
                \ . expand("<afile>:e")
augroup END
" }}}
" FILETYPE_COMMENTS ---------- {{{
augroup commentByFileType
    " clear previous autocommands
    autocmd!
    " Add them back
    autocmd FileType javascript nnoremap <buffer> <LocalLeader>c I// <Esc>
    autocmd FileType python,php,sh nnoremap <buffer> <LocalLeader>c I# <Esc>
    autocmd FileType vim nnoremap <buffer> <LocalLeader>c I" <Esc>
    autocmd FileType html nnoremap <buffer> <LocalLeader>c I<!-- <Esc>A --><Esc>
    autocmd FileType css nnoremap <buffer> <LocalLeader>c I/* <Esc>A */<Esc>
augroup END
" }}}
" FILETYPE_SPELLING ---------- {{{
augroup spelling
    autocmd!
    autocmd FileType text setlocal spell spelllang=en_us formatoptions+=wa
                \ formatoptions-=cq
augroup END
" }}}
" FILETYPE_SNIPPET_ABBREVIATIONS ----------{{{
augroup snippetAbbreviations
    autocmd!
    autocmd FileType python iabbrev <buffer> iff if:<Left>
    autocmd FileType python iabbrev <buffer> whi while:<Left>
    autocmd FileType python,sh,vim iabbrev <buffer> ret return
    autocmd FileType python iabbrev <buffer> ei elif:<Left>
    autocmd FileType python iabbrev <buffer> el else:<C-O>o<Left>
    autocmd FileType html iabbrev <buffer> h1 <h1></h1><C-O>F<
    autocmd FileType html iabbrev <buffer> h2 <h2></h2><C-O>F<
    autocmd FileType html iabbrev <buffer> h3 <h3></h3><C-O>F<
    autocmd FileType html iabbrev <buffer> h4 <h4></h4><C-O>F<
    autocmd FileType html iabbrev <buffer> h5 <h5></h5><C-O>F<
    autocmd FileType html iabbrev <buffer> h6 <h6></h6><C-O>F<
    autocmd FileType html iabbrev <buffer> p <p></p><C-O>F<
    autocmd FileType vim iabbrev <buffer> ei elseif
    autocmd FileType sh iabbrev <buffer> func
                \ function N(){}<C-O>i<CR><Esc>kfNciw<BS>
    autocmd FileType javascript nnoremap <buffer> <Leader>; mqA;<Esc>`q
    autocmd FileType javascript inoremap <buffer> <Leader>; <Esc>:execute
                \ "normal! mqA;\<lt>Esc>`q"<CR>
    autocmd FileType vim iabbrev <buffer> ef endfunction
augroup END
" }}}
" FILETYPE_TABS ---------- {{{
augroup fileTypeTabs
    autocmd!
    autocmd FileType javascript setlocal shiftwidth=2 softtabstop=2
    autocmd FileType python setlocal shiftwidth=4 softtabstop=2
augroup END
" }}}
" VIMSCRIPT_FILE_SETTINGS --------------{{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevelstart=0
augroup END
" }}}
" WSL_YANK_SUPPORT ---------- {{{
let s:clip = '/mnt/c/Windows/System32/clip.exe'
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * if v:event.operator ==# 'y'
                    \ | call system(s:clip, @0)
                    \ | endif
    augroup END
endif
" }}}
" }}}
" PERSONAL_ABBREVIATIONS ---------- {{{
iabbrev @@ gmsoudersjr@gmail.com
iabbrev ssig -- <CR>Gerald M. Souders Jr.<CR>gmsoudersjr@gmail.com
" }}}
" FORMATTING_EDIT_OPTIONS ---------- {{{
set formatoptions=tcqnp1
" To help with completions
set ignorecase
set infercase
set smartcase
" Display all matching files when tab complete
set wildmenu
" Automatically wrap text
set wrap
set textwidth=79
set colorcolumn=+1
set tabstop=8
set shiftwidth=4
set softtabstop=4
set expandtab
set noshiftround
set backspace=indent,eol,start
set autoindent
" Show what the whitespaces are
set list
" Highlight matching pairs of brackets.  Use the '%' character to jump between
" them.
set matchpairs+=<:>
set scrolloff=5
" Highlight matching search patterns
set hlsearch
set incsearch
set pastetoggle=<F2>
set diffopt+=vertical
" }}}
" STATUS_LINE_DISPLAY ---------- {{{
" CURRENT_MODE_FUNCTION ---------- {{{
let g:currentmode={ 'n' : 'Normal', 'no' : 'N-Operator Pending',
            \ 'v' : 'Visual', 'V' : 'V-Line', '^V' : 'V-Block',
            \ 's' : 'Select', 'S' : 'S-Line', '^S' :'S-Block',
            \ 'i' : 'Insert', 'R' : 'Replace', 'Rv' : 'V-Replace',
            \ 'c' : 'Command', 'cv' : 'Vim Ex', 'ce' : 'Ex ',
            \ 'r' : 'Prompt','rm' : 'More', 'r?' : 'Confirm',
            \ '!' : 'Shell', 't' : 'Terminal' }
function! ModeCurrent() abort
    let l:modecurrent = mode()
    let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V-Block '))
    let l:current_status_mode = l:modelist
    return l:current_status_mode
endfunction
" }}}
" STATUS_LINE ---------- {{{
set statusline=
set statusline+=[%n] " Buffer Number
set statusline+=\ %.15F " File Path Name
set statusline+=%m%r%h%w " File tags
set statusline+=%< " Truncate from here
set statusline+=[TYPE=%Y] " Type of file
set statusline+=[FORMAT=%{&ff}]\  " Format of file
set statusline+=%1* " Color the mode
set statusline+=â–‘â–’%{ModeCurrent()}â–’â–‘\  " Mode
set statusline+=%= " Right justify.  Everything below is on the right side.
set statusline+=%0* " End mode color
set statusline+=%2* " Color the rest of the statusline
set statusline+=L:%04l/%04L\ C:%02v " Cursor position with 0s padding
set statusline+=\ [%p%%] " Percentage
set statusline+=%0* " End color
set statusline+=%3* " Color the date/time
set statusline+=\ %{strftime('%X\ %a.%d.%b')} " Time
set statusline+=%0* " End color
set laststatus=2
" }}}
" }}}
" COLOR_SCHEME ---------- {{{
" GRUVBOX_SETTINGS ---------- {{{
let g:gruvbox_italic=1
let g:gruvbox_guisp_fallback="bg"
colorscheme gruvbox
" }}}
" STATUS_LINE_COLORS ---------- {{{
" Setting colors for the statusline - up to User9
" Set the mode foreground color
highlight User1 guibg=SlateBlue guifg=Yellow
" Set the position foreground color
highlight User2 guibg=SlateBlue guifg=LightGreen
" Set the date/time foreground color
highlight User3 guibg=SlateBlue guifg=White
" }}}
" FOLD_COLORS ---------- {{{
highlight Folded guibg=NONE guifg=slateblue
highlight FoldColumn guibg=background guifg=DarkGrey
" }}}
" }}}
" MAN_PAGE_PLUGIN ---------- {{{
" Make man pages available in vim
runtime! ftplugin/man.vim
" }}}
